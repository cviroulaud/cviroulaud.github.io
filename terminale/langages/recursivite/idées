fonction récursive 'demine' qui dans le contexte du jeu démineur 
- en entrée prend une case non révélée sans bombe;
- la révèle;
- si elle a au moins un voisin avec une bombe, affiche le nombre de voisins avec une bombe et se termine;
- sinon s'appelle elle-même  avec toutes les cases voisines non révélées;


Idée 1 :
- Donner aux élèves des tableaux "russes" (comme les poupées russes) de la forme [[[[[[[......[].....]]]]]]] et leur demander de créer un algorithme comptant le nombre de tableaux imbriqués les uns dans les autres.
- Donner aux élèves une variante  : chaque tableau contient 0 ou 2 tableaux. Compter le nombre de tableaux en tout (avec cette variante en itératif ça ne passe plus).

Idée 2 :
N objets Piece dont N-1 ont une masse M (les vraies pièces) et 1 a une masse M-epsilon (la fausse pièce).
1 objet Balance capable de comparer le poids de deux SDD S1 et S2 de pièces (SDD : tableau ou liste ou ...).
1 méthode pour "couper" la SDD.
Algorithme pour trouver la fausse pièce ?
[à formaliser davantage]

Idée 3 (**):
On dispose de n inégalités  disposées dans un tableau inegs.
On dispose de n+1 nombres entiers triés dans un tableau nbs.
Ecrire un algorithme (en Python ou en langage naturel) qui permet d'obtenir un tableau nbs_ok contenant tous les nombres de nbs dans un ordre tel qu'ils respectent les inégalités de inegs. Voici un exemple :
Inegs = [ '<', '<', '>', '>', '<']
nbs = [ 3, 13, 13, 17, 19, 23]
nbs_ok = [13, 17, 19, 13, 3, 23] convient puisqu'on a bien : 13 < 17 < 19 > 13 > 3 < 19.

Idée 4 (***):
Lors d'un championnat, chacune des n=26 équipes A, B, C, D … Z a rencontré chacune des n-1 = 25 autres équipes et a soit perdu soit gagné la rencontre. Déterminer un algorithme permettant de ranger les équipes dans un tableau equipes de taille n=26 de sorte que pour tout indice i entre 0 et 24, on ait equipes[i] qui a gagné le match contre equipes[i+1]. 
Exemple : A a gagné contre B, A a perdu contre C, A a perdu contre D, B a perdu contre C, B a perdu contre D, C a gagné contre D, equipes = [C, D, A, B] convient

Idée 5 (***):
Voir aussi le problème des célébrités ...https://www.geeksforgeeks.org/the-celebrity-problem/

